TITLE
An implementation of Semi-Literate programming for Raku with Pod6

INTRODUCTION

I want to create a semi-literate Raku source file with the extension .sl.
Then, I will weave it to generate a readable file in formats like Markdown,
PDF, HTML, and more. Additionally, I will tangle it to create source code
without any Pod6.

To do this, I need to divide the file into Pod and Code sections by parsing
it. For this purpose, I will create a dedicated Grammar.

(See Useful::Regexes for the definitions of the named regexes used here.
(hws == Horizontal WhiteSpace))

The Grammar

        3| grammar Semi::Literate is export does Useful::Regexes {


Our file will exclusively consist of Pod or Code sections, and nothing
else. The Code sections are of two types, a) code that is woven into the
documentation, and b) code that is not woven into the documentation. The
TOP token clearly indicates this.

        4|     token TOP {
        5|         [
        6|            || <code>
        7|         ]*
        8|     } 
        9| 
       10|     token code  {
       11|         [
       12|           || <non-woven>
       13|           || <woven>
       14|         ]+
       15|     } 


  The Pod6 delimiters

According to the documentation,

Every Pod6 document has to begin with C<=begin pod> and end with C<=end> pod.


So let's define those tokens.

    The begin-pod token

       16|     token begin-pod {
       17|         <leading-ws>
       18|         '=' begin <hws> pod
       19|         <ws-till-EOL>
       20|     } 


    The end-pod token

The end-pod token is much simpler.

       21|     token end-pod  {
       22|         <leading-ws>
       23|         '=' end <hws> pod
       24|         <ws-till-EOL>
       25|     } 


  Replacing Pod6 sections with blank lines

When we tangle the semi-literate code, all the Pod6 will be removed. This
would leave a lot of blank lines in the Raku code. So we'll clean it up. We
provide the option for users to specify the number of empty lines that
should replace a pod block. To do this, simply add a Pod6 comment
immediately after the =begin pod statement. The comment can say anything
you like, but must end with a digit specifying the number of blank lines
with which to replace the Pod6 section.

        =begin pod
        =comment I want this pod block replaced by only one line 1
        ...
        =end pod


Here's the relevant regex:

       26|     token blank-line-comment {
       27|         <leading-ws>
       28|         '=' comment
       29|         \N*?
       30|         $<num-blank-lines> = (\d+)?
       31|         <ws-till-EOL>
       32|     } 


  The Pod token

Within the delimiters, all lines are considered documentation. We will
refer to these lines as plain-lines. Additionally, it is possible to have
nested Pod sections. This allows for a hierarchical organization of
documentation, allowing for more structured and detailed explanations.

It is also permissible for the block to be empty. Therefore, we will use
the 'zero-or-more' quantifier on the lines of documentation, allowing for
the possibility of having no lines in the block.

       33|     token pod {
       34|         <begin-pod>
       35|         <blank-line-comment>?
       36|             [<pod> | <plain-line>]*
       37|         <end-pod>
       38|     } 


  The Code tokens

The Code sections are similarly easily defined. There are two types of Code
sections, depending on whether they will appear in the woven code.

    Woven sections

These sections are trivially defined. They are just one or more
plain-lines.

       39|     token woven  {
       40|         [
       41|             || <plain-line>
       42|         ]+
       43|     } 


    Non-woven sections

Sometimes there will be code you do not want woven into the documentation,
such as boilerplate code like use v6.d;. You have two options to mark such
code. By individual lines or by a delimited block of code.

       44|     token non-woven {
       45|         [
       46|           || <one-line-no-weave>
       47|           || <delimited-no-weave>
       48|         ]+
       49|     } 


    One line of code

Simply append # no-weave-this-line at the end of the line!

       50|     token one-line-no-weave {
       51|         <leading-ws> \N*?
       52|         '#' <hws> 'no-weave-this-line'
       53|         <ws-till-EOL>
       54|     } 


    Delimited blocks of code

Simply add comments # begin-no-weave and #end-no-weave before and after the
code you want ignored in the formatted document.

       55|     token begin-no-weave {
       56|         <leading-ws>
       57|         '#' <hws> 'begin-no-weave'
       58|         <ws-till-EOL>
       59|     } 
       60| 
       61|     token end-no-weave {
       62|         <leading-ws>
       63|         '#' <hws> 'end-no-weave'
       64|         <ws-till-EOL>
       65|     } 
       66| 
       67|     token delimited-no-weave {
       68|         <begin-no-weave>
       69|             <plain-line>*
       70|         <end-no-weave>
       71|     } 


    The plain-line token

The plain-line token is, really, any line at all... ... except for one
subtlety. They it can't be one of the begin/end delimiters. We can specify
that with a Regex Boolean Condition Check.

       72|     token plain-line {
       73|         :my $*EXCEPTION = False;
       74|         [
       75|           ||  <begin-pod>         { $*EXCEPTION = True }
       76|           ||  <end-pod>           { $*EXCEPTION = True }
       77|           ||  <begin-no-weave>    { $*EXCEPTION = True }
       78|           ||  <end-no-weave>      { $*EXCEPTION = True }
       79|           ||  <one-line-no-weave> { $*EXCEPTION = True }
       80|           || [^^ <rest-of-line>]
       81|         ]
       82|         <?{ !$*EXCEPTION }>
       83|     } 


And that concludes the grammar for separating Pod from Code!

       84| } 


The Tangle subroutine

This subroutine will remove all the Pod6 code from a semi-literate file
(.sl) and keep only the Raku code.

       85| sub tangle (


The subroutine has a single parameter, which is the input filename. The
filename is required. Typically, this parameter is obtained from the
command line or passed from the subroutine MAIN.

       86|     Str $input-file!,


The subroutine will return a Str, which will be a working Raku program.

       87|         --> Str ) is export {


First we will get the entire Semi-Literate .sl file...

       88|     my Str $source = $input-file.IO.slurp;


  Clean the source

    Remove unnecessary blank lines

Very often the code section of the Semi-Literate file will have blank lines
that you don't want to see in the tangled working code. For example:

                                                    # <== unwanted blank lines
                                                    # <== unwanted blank lines
        sub foo () {
            { ... }
        } # end of sub foo ()
                                                    # <== unwanted blank lines
                                                    # <== unwanted blank lines



So we'll remove the blank lines immediately outside the beginning and end
of the Pod6 sections.

       89|     my Str $cleaned-source = $source;
       90|     $cleaned-source ~~ s:g{\=end (\N*)\n+} =   "\=end$0\n";
       91|     $cleaned-source ~~ s:g{\n+\=begin (<hws> pod) [<hws> \d]?} = "\n\=begin$0";


  The interesting stuff

We parse it using the Semi::Literate grammar and obtain a list of
submatches (that's what the caps method does) ...

       92|     my Pair @submatches = Semi::Literate.parse($cleaned-source).caps;
       93| 
       94|     my Str $raku-code = @submatches.map( {


    Replace Pod6 sections with blank lines

       95|         when .key eq 'pod' {
       96|             my $num-blank-lines =
       97|                 .value.hash<blank-line-comment><num-blank-lines>;
       98|             "\n" x $num-blank-lines with $num-blank-lines;
       99|         }


...and iterate through the submatches and keep only the woven sections...

      100|         when .key eq 'code' {
      101|             if .<code><woven> {
      102|                 $_<code><woven>.join;
      103|             } 
      104|         } 
      105| 


... and we will join all the code sections together...

      106|     } 
      107|     ).join;


    Remove the no-weave delimiters

      108|     $raku-code ~~ s:g{ <leading-ws> '#' <hws> 'end-no-weave'       <rest-of-line> }
      109|         = '';


    remove blank lines at the end

      110|     $raku-code ~~ s{\n  <blank-line>* $ } = '';


And that's the end of the tangle subroutine!

      111|     return $raku-code;
      112| } 


The Weave subroutine

The Weave subroutine will weave the .sl file into a readable Markdown,
HTML, or other format. It is a little more complicated than sub tangle
because it has to include the code sections.

      113| sub weave (


  The parameters of Weave

sub weave will have several parameters.

    $input-file

The input filename is required. Typically, this parameter is obtained from
the command line through a wrapper subroutine MAIN.

      114|     Str $input-file!;


    $line-numbers

It can be useful to print line numbers in the code listing. It currently
defaults to True.

      115|     Bool :l(:$line-numbers)  = True;


sub weave returns a Str.

      116|         --> Str ) is export {
      117| 
      118|     my UInt $line-number = 1;


First we will get the entire .sl file...

      119|     my Str $source = $input-file.IO.slurp;


    Remove blank lines at the begining and end of the code

EXPLAIN THIS!

      120|     my Str $cleaned-source = $source;
      121|     $cleaned-source ~~ s:g{\=end (\N*)\n+} =   "\=end$0\n";
      122|     $cleaned-source ~~ s:g{\n+\=begin (<hws> pod) [<hws> \d]?} = "\n\=begin$0";


  Interesting stuff

...Next, we parse it using the Semi::Literate grammar and obtain a list of
submatches (that's what the caps method does) ...

      123|     my Pair @submatches = Semi::Literate.parse($cleaned-source).caps;


...And now begins the interesting part. We iterate through the submatches
and insert the code sections into the Pod6...

This function checks if the line of code is a full line comment. If so,
return False, so nothing will be printed for this line.

If it's a line of code with a comment at the end, remove the comment from
the line and return True

Otherwise return True

      124|     my token full-line-comment {
      125|         $<the-code>=(<leading-ws>)
      126|         '#'
      127|         <rest-of-line>
      128|     } 
      129| 
      130|     my regex partial-line-comment {
      131|         $<the-code>=(<leading-ws> <optional-chars>)  
      132|         <!after <opening-quote>>         
      133|         '#'                              
      134|         $<the-comment>=<-[#]>*           
      135|         <ws-till-EOL>
      136|     } 
      137| 
      138|     sub remove-comments (Seq $lines --> Seq) {
      139| 
      140|         my @retval = ();
      141|         for $lines.List -> $line {
      142|             given $line {
      143|                 when /<full-line-comment>/ {; 
      144| 
      145|                 when /<partial-line-comment>/ {
      146|                     @retval.push: $<partial-line-comment><the-code>;
      147|                 }
      148| 
      149|                 default
      150|                     { @retval.push: $line; }
      151|             } 
      152|         } 
      153| 
      154| 
      155|         return @retval.Seq;
      156|     } 
      157| 
      158|     my Str $non-woven-blank-lines = qq:to/EOQ/;
      159|         \=end code
      160|         \=end pod
      161|         \=begin pod
      162|         \=begin code :lang<raku>
      163|         EOQ
      164| 
      165|     my Regex $full-comment-blank-lines = rx[
      166|         '=begin pod'              <ws-till-EOL>
      167|         '=begin code :lang<raku>' <ws-till-EOL>
      168|         [<leading-ws> \d+ | '|'?  <ws-till-EOL>]*
      169|         '=end code'               <ws-till-EOL>
      170|         '=end pod'                <ws-till-EOL>
      171|     ];
      172| 
      173|     my $fmt = ($line-numbers ?? "%3s| " !! '') ~ "%s\n";
      174| 
      175|     my Str $weave = @submatches.map( {
      176|         when .key eq 'pod' {
      177|             .value
      178|         } 
      179| 
      180|         when .key eq 'code' {
      181|             { qq:to/EOCB/ if .<code><woven>; }
      182|             \=begin pod
      183|             \=begin code :lang<raku>
      184|              {
      185|                 $_<code><woven>
      186|                 ==> lines()
      187|                 ==> remove-comments()
      188|                 ==> map(
      189|                         $line-numbers
      190|                             ?? {"%4s| %s\n".sprintf($line-number++, $_) }
      191|                             !! {     "%s\n".sprintf(                $_) }
      192|                 )
      193|                 ==> chomp() 
      194|              }
      195|             \=end code
      196|             \=end pod
      197|             EOCB
      198|         } 
      199| 
      200|      } 
      201|     ).join;


    Remove unseemly blank lines

      202|     $weave ~~ s:g{ $non-woven-blank-lines | <$full-comment-blank-lines> } = '';


    remove blank lines at the end

      203|     $weave ~~ s{\n  <blank-line>* $ } = '';


And that's the end of the weave subroutine!

      204|     "deleteme.rakudoc".IO.spurt: $weave;
      205|     return $weave
      206| } 


NAME

Semi::Literate - A semi-literate way to weave and tangle Raku/Pod6 source
code.

VERSION

This documentation refers to Semi-Literate version 0.0.1

SYNOPSIS

    use Semi::Literate;
    # Brief but working code example(s) here showing the most common usage(s)

    # This section will be as far as many users bother reading
    # so make it as educational and exemplary as possible.



DESCRIPTION

  Influences

Semi::Literate is based on Daniel Sockwell's Pod::Literate.

Also influenced by zyedidia's
<Literate|https://zyedidia.github.io/literate/> program. Especially the
idea of not weaving some portions of the code.

A full description of the module and its features. May include numerous
subsections (i.e. =head2, =head2, etc.)

DEPENDENCIES

    Useful::Regexes

BUGS AND LIMITATIONS

There are no known bugs in this module. Patches are welcome.

AUTHOR

Shimon Bollinger (deoac.bollinger@gmail.com)

LICENSE AND COPYRIGHT

© 2023 Shimon Bollinger. All rights reserved.

This module is free software; you can redistribute it and/or modify it
under the same terms as Raku itself. See The Artistic License 2.0.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.
