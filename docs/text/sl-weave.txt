        1| 
        2| # Weave a Semi-literate file into Text, Markdown, HTML, etc.
        3| # Â© 2023 Shimon Bollinger. All rights reserved.
        4| # Last modified: Wed 06 Sep 2023 03:28:29 PM EDT
        5| # Version 0.0.1
        6| 


TITLE
Weave a semi-literate program into Text, Markdown, etc. format

        7| sub MAIN($input-file,
        8|          Bool :l(:$line-numbers)  = True;
        9|             #= Should line numbers be added to the embeded code?
       10|          Str :f(:$format) is copy = 'markdown';
       11|             #= The output format for the woven file.
       12|          Str :o(:$output-file);
       13|             #= The name of the output file.  Defaults to stdout.
       14|          Bool :v(:$verbose) = True;
       15|             #= verbose will print diagnostics and debug prints to $*ERR
       16|     ) {
       17|     my Str $extension;
       18|     my Str @options;
       19|     my Bool $no-output-file = False;
       20| 
       21|     note "Input Format =>  $format" if $verbose;
       22|     $format .= trim;
       23|     given $format {
       24|         when  /:i ^ markdown | md $ / {
       25|             $format    = 'MarkDown2';
       26|             $extension = 'md';
       27|         };
       28|         when  /:i ^ [[plain][\-|_]?]? t[e]?xt $ / {
       29|             $format    = 'Text';
       30|             $extension = 'txt';
       31|         }
       32|         when  /:i ^ [s]?htm[l]? $/ {
       33|             $format    = 'HTML2';
       34|             $extension = 'html';
       35|         } # end of when  /:i html 2? $/
       36| 
       37|         when /:i ^ pdf $ / {
       38|             $format = 'PDF';
       39|             $extension = '.pdf';
       40|             @options = "--save-as=$output-file" if $output-file;
       41|             $no-output-file = True;
       42|         }
       43| 
       44|         when /:i ^ pdf[\-|_]?lite  $ / {
       45|             $format = 'PDF::Lite';
       46|             $extension = '.pdf';
       47|             @options = "--save-as=$output-file" if $output-file;
       48|             $no-output-file = True;
       49|         }
       50| 
       51|         default {
       52|             $extension = $format;
       53|         } # end of default
       54| 
       55| 
       56|     } # end of given $output-format
       57|     note "Weave Format =>  $format" if $verbose;
       58|     my Str $f = "Pod::To::$format";
       59|     try require ::($f);
       60|     if ::($f) ~~ Failure {
       61|         die "$format is not a supported output format"
       62|     } # end of if ::("Pod::To::$_") ~~ Failure
       63| 
       64|     my Str $woven = weave($input-file, :$format, :$line-numbers);
       65| 
       66|     my ($pod-file, $fh) = tempfile(suffix =>  '.p6');
       67| 
       68|     $pod-file.IO.spurt: $woven;
       69| 
       70|     my $output-file-handle = $output-file              ??
       71|                                 open(:w, $output-file) !!
       72|                                 $*OUT
       73|                             unless $no-output-file;
       74| 
       75|     run $*EXECUTABLE,
       76|         "--doc=$format",
       77|         $pod-file,
       78|         @options,
       79|         :out($output-file-handle);
       80| 
       81| } # end of sub MAIN($input-file,
       82| 

